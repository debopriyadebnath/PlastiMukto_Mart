// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  points      Int      @default(0)
  rank        Int?     // leaderboard position
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bounties    Bounty[]    @relation("UserBounties")
  submissions Submission[]
  events      EventUser[]
  wasteAnalyses WasteAnalysis[]
  marketplaceItems MarketplaceItem[]
}

model Bounty {
  id          String   @id @default(cuid())
  title       String
  description String
  reward      Int
  deadline    DateTime
  createdAt   DateTime @default(now())
  
  // Relations
  creator     User     @relation("UserBounties", fields: [creatorId], references: [id])
  creatorId   String
  submissions Submission[]
}

model Submission {
  id          String   @id @default(cuid())
  proofImage  String   // screenshot / upload proof
  status      String   @default("pending") // pending, approved, rejected
  createdAt   DateTime @default(now())

   
  user        User   @relation(fields: [userId], references: [id])
  userId      String
  bounty      Bounty @relation(fields: [bountyId], references: [id])
  bountyId    String
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  location    String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())

  // Relations
  participants EventUser[]
}
// Add these models to your existing schema.prisma

model WasteAnalysis {
  id              String   @id @default(cuid())
  imageUrl        String   // Supabase storage URL
  imageName       String   // Original filename
  imageSize       Int      // File size in bytes
  mimeType        String   // Image MIME type
  status          String   @default("processing") // processing, completed, failed
  errorMessage    String?  // Error details if failed
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  
  // Gemini Analysis Results
  rawGeminiResponse Json?  // Full Gemini response
  detectedItems     DetectedWasteItem[]
  lifecycleInfo     Json?  // Lifecycle data
  recyclingOptions  Json?  // Recycling suggestions
  reuseIdeas        Json?  // Reuse suggestions
  confidence        Float? // Overall confidence score
  
  // Relations
  user      User   @relation(fields: [userId], references: [id])
  userId    String
}

model DetectedWasteItem {
  id          String   @id @default(cuid())
  name        String   // e.g., "Plastic Bottle", "Cardboard Box"
  category    String   // e.g., "Plastic", "Paper", "Metal", "Glass"
  material    String?  // e.g., "PET", "HDPE", "Aluminum"
  confidence  Float    // Gemini confidence score (0-1)
  boundingBox Json?    // Image coordinates for detected item
  description String?  // Gemini's description of the item
  
  // Relations
  analysis   WasteAnalysis @relation(fields: [analysisId], references: [id])
  analysisId String
}

model WasteProduct {
  id              String   @id @default(cuid())
  name            String   @unique
  category        String
  material        String?
  description     String?
  
  // Lifecycle Information
  lifecycleStages Json     // Array of lifecycle stages
  decompositionTime String? // How long it takes to decompose
  
  // Recycling Information
  recyclable      Boolean  @default(false)
  recyclingCode   String?  // e.g., "PET", "HDPE"
  recyclingCenters Json?   // Nearby recycling centers
  
  // Reuse Information
  reuseIdeas      Json     // Array of creative reuse ideas
  upcyclingPotential String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
model EventUser {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  status    String   @default("interested") // interested, going, not_going
}

model MarketplaceItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
 seller      User @relation(fields: [sellerId], references: [id])
  sellerId    String
}